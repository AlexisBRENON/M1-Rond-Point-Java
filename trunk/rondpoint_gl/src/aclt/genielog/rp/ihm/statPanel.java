/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package aclt.genielog.rp.ihm;

import aclt.genielog.rp.system.RondPoint;
import aclt.genielog.rp.system.Stats;
import aclt.genielog.rp.system.VoieEnum;
import java.util.Observable;
import java.util.Observer;

/**
 *
 * @author alexis
 */
public class statPanel extends javax.swing.JPanel implements Observer {

    /**
     * Creates new form statPanel
     */
    public statPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        totalLabel = new javax.swing.JLabel();

        statTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {VoieEnum.NORD, null, null, null, null},
                {VoieEnum.OUEST, null, null, null, null},
                {VoieEnum.SUD, null, null, null, null},
                {VoieEnum.EST, null, null, null, null},
                {"Total", null, null, null, null}
            },
            new String [] {
                "Voie", "Voitures en attente", "Temps d'attente", "Voitures entr√©es", "Voitures sorties"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Integer.class, java.lang.Long.class, java.lang.Integer.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            @Override
            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            @Override
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        statTable.setRowHeight(18);
        statTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(statTable);

        jLabel1.setText("Nombre total de voitures dans le rond-point :");

        totalLabel.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(totalLabel)))
        );
    }
    // Variables declaration - do not modify
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable statTable;
    private javax.swing.JLabel totalLabel;
    // End of variables declaration

    @Override
    public void update (Observable o, Object arg) {
        if (o instanceof RondPoint) {
            RondPoint rp = (RondPoint) o;
            Stats stat = rp.statistiques();

            for (int i = 0; i < 4; i++) {
                statTable.getModel().setValueAt(stat.voituresEnAttente(VoieEnum.values()[i]), i, 1);
                statTable.getModel().setValueAt(Math.round(stat.attenteMoyenne(VoieEnum.values()[i])/1000), i, 2);
                statTable.getModel().setValueAt(stat.voituresEntrees(VoieEnum.values()[i]), i, 3);
                statTable.getModel().setValueAt(stat.voituresSorties(VoieEnum.values()[i]), i, 4);
            }
            statTable.getModel().setValueAt(stat.voituresEnAttente(), 4, 1);
            statTable.getModel().setValueAt(Math.round(stat.attenteMoyenne()/1000), 4, 2);
            statTable.getModel().setValueAt(stat.voituresEntrees(), 4, 3);
            statTable.getModel().setValueAt(stat.voituresSorties(), 4, 4);

            totalLabel.setText(Integer.toString(stat.voituresEngagees()));
        }
    }
}
